#########
# Reuse #
#########
variables:
  RUNNER_IMAGE: $CI_REGISTRY_IMAGE/builder:$CI_PIPELINE_ID

.deploy-beta: &deploy-beta
  only:
    - tags
  except:
    - branches

.deploy-rc: &deploy-rc
  only:
    - /^v\d+\.\d+\.\d+-rc/
    - /^v\d+\.\d+\.\d+$/
  except:
    - branches

.deploy-live: &deploy-live
  only:
    - /^v\d+\.\d+\.\d+$/
  except:
    - branches
 
##########
# Stages #
##########

stages:
  - Prepare     # Prepare the tools we'll need for the rest of the pipeline
  - Quality     # Quality checks, unit tests, lints, etc
  - Release     # Release the artifact

###########
# Prepare #
###########
Build Runner:
  stage: Prepare
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build . -f .gitlab-ci/runner/Dockerfile -t $RUNNER_IMAGE
    - docker push $RUNNER_IMAGE

###########
# Quality #
###########
.quality: &quality
  stage: Quality
  image:  $RUNNER_IMAGE
  before_script:
    - cp -r /app/node_modules .

Unit test:
  <<: *quality
  script:
    - npm test

Lint:
  <<: *quality
  script:
    - npm run lint

Flow:
  <<: *quality
  script:
    - npm run flow

Audit:
  <<: *quality
  allow_failure: true
  script:
    - npm audit

Build Dry Run:
  <<: *quality
  script:
    - npm run build

Dependencies:
  <<: *quality
  allow_failure: true
  script:
    - npm outdated

###########
# Release #
###########
Release:
  stage: Release
  image:  $RUNNER_IMAGE
  only:
    - tags
  before_script:
    - cp -r /app/node_modules .
  script:
    - echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc
    - npm publish
